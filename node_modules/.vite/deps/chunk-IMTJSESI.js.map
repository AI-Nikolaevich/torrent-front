{
  "version": 3,
  "sources": ["../../@microsoft/signalr/src/ILogger.ts", "../../@microsoft/signalr/src/Loggers.ts", "../../@microsoft/signalr/src/Utils.ts"],
  "sourcesContent": ["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n", "// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n", "// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\n\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    // react-native has a window but no document so we should check both\r\n    public static get isBrowser(): boolean {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"object\";\r\n    }\r\n\r\n    // WebWorkers don't have a window object so the isBrowser check would fail\r\n    public static get isWebWorker(): boolean {\r\n        return !Platform.isNode && typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    // react-native has a window but no document\r\n    static get isReactNative(): boolean {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"undefined\";\r\n    }\r\n\r\n    // Node apps shouldn't have a window object, but WebWorkers don't either\r\n    // so we need to check for both WebWorker and window\r\n    public static get isNode(): boolean {\r\n        return typeof process !== \"undefined\" && process.release && process.release.name === \"node\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string,\r\n                                  content: string | ArrayBuffer, options: IHttpConnectionOptions): Promise<void> {\r\n    const headers: {[k: string]: string} = {};\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent!)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers},\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel): ILogger {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log !== undefined) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private _subject: Subject<T>;\r\n    private _observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly _minLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public out: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getErrorString(e: any): string {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    } else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n\r\n/** @private */\r\nexport function getGlobalThis(): unknown {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}\r\n"],
  "mappings": "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",
  "names": ["LogLevel"]
}
